generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String         @id @default(cuid())
  privyId          String?        @unique
  clerkId          String?        @unique
  faucetPoints     Int            @default(100)
  points           Int            @default(0)
  profilePicture   String?
  bets             Bet[]
  firstName        String?
  lastName         String?
  fullName         String?
  authMethod       String?
  email            String?        @unique
  phone            String?        @unique
  username         String?        @unique
  lastClaimedAt    DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  earlyAccess      Boolean        @default(false)
  degenMode        Boolean        @default(false)
  wallets          Wallet[]
  notifications    Notification[]
  transactions     Transaction[]
  UserLevel        UserLevel?
  sponsoredMarkets Market[]       @relation("CreatedMarkets")

  // Refferal system 
  referralCode          String                  @unique
  referredById          String? // user who referred them
  referredBy            User?                   @relation("Referrals", fields: [referredById], references: [id])
  referrals             User[]                  @relation("Referrals")
  rewards               Reward[]
  PlatformRevenue       PlatformRevenue[]
  Tournament            Tournament[]
  TournamentParticipant TournamentParticipant[]

  @@map("users")
}

model Wallet {
  id                  String         @id @default(cuid())
  ownerId             String
  name                String?
  publicKey           String
  encryptedPrivateKey String?        @db.Text
  walletSource        WalletSource   @default(CUSTOM)
  chain               Chain          @default(CHILIZ)
  delegated           Boolean        @default(false)
  active              Boolean        @default(true)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  owner               User           @relation(fields: [ownerId], references: [id])
  transactions        Transaction[]
  notifications       Notification[]

  @@unique([ownerId, publicKey])
  @@map("wallets")
}

model Market {
  id               String         @id @default(cuid())
  title            String
  status           MarketStatus   @default(OPEN) // "open", "closed", "resolved"
  outcomes         Outcome[]
  marketType       MarketType     @default(CUSTOM)
  createdAt        DateTime       @default(now())
  coverUrl         String?
  themeColor       String?
  resolvedAt       DateTime?
  closedAt         DateTime?
  startsAt         DateTime       @default(now())
  endsAt           DateTime       @default(now())
  winningOutcomeId String? // ID of the winning outcome
  resolvedById     String?
  // Sponsorship
  creatorId        String?
  creator          User?          @relation("CreatedMarkets", fields: [creatorId], references: [id])
  sponsoredStake   Float          @default(0) // Locked stake
  feePercent       Float          @default(5.0) // Platform cut
  creatorFeeShare  Float          @default(50.0) // % of platform fee given to creator
  players          PlayerMarket[]
  // match
  Match            Match?         @relation(fields: [matchId], references: [id])
  matchId          String?

  // ðŸ”¥ New: Entry Settings
  entryType           MarketEntryType @default(FREE)
  entryFee            Float? // used when entryType == PAID
  requiredToken       String? // token symbol or address, for TOKEN_GATED
  requiredTokenAmount Float? // how much token is required
  entryDescription    String? // show message like "Hold 3 $X to join"

  // analytics
  totalPools        Float?            @default(0) // sum of all stakes
  totalLosers       Float? // sum of losing stakes
  platformFeeEarned Float? // fee taken by platform
  creatorFeeEarned  Float? // fee given to market creator
  PlatformRevenue   PlatformRevenue[]
  tournaments       Tournament[] //@relation(fields: [tournamentId], references: [id])
  tournamentId      String?
}

// MATCH SCHEMA
model Match {
  id          String      @id @default(cuid())
  title       String
  description String?
  teamAId     String?
  teamBId     String?
  teamA       Team?       @relation("TeamA", fields: [teamAId], references: [id])
  teamB       Team?       @relation("TeamB", fields: [teamBId], references: [id])
  startsAt    DateTime
  endsAt      DateTime?
  matchStatus MatchStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())

  // Relation to markets
  markets Market[]
  // Optional: you can add links to leagues later if needed
}

// Tournaments

model Tournament {
  id                  String          @id @default(cuid())
  title               String
  description         String?
  coverUrl            String?
  themeColor          String?
  type                LeagueType      @default(OPEN)
  entryType           LeagueEntryType @default(FREE)
  scoringType         ScoringType     @default(TOTAL_POINTS)
  status              MatchStatus     @default(UPCOMING)
  entryFee            Float? // If PAID
  requiredToken       String? // If TOKEN_GATED
  requiredTokenAmount Float? // If TOKEN_GATED
  entryDescription    String? // e.g. "Stake 10 $GOLD to enter"
  prizePool           Float?          @default(0)
  creatorId           String?
  creator             User?           @relation(fields: [creatorId], references: [id])
  startsAt            DateTime
  endsAt              DateTime
  resolvedAt          DateTime?
  createdAt           DateTime        @default(now())
  totalPointsUsed     Float           @default(0)
  // Linked markets
  markets             Market[]

  // Users who joined
  participants TournamentParticipant[]
}

model TournamentParticipant {
  id           String   @id @default(cuid())
  userId       String
  tournamentId String
  score        Float    @default(0)
  joinedAt     DateTime @default(now())

  user   User       @relation(fields: [userId], references: [id])
  league Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([userId, tournamentId])
}

model Outcome {
  id           String @id @default(cuid())
  label        String // e.g. "Yes", "No"
  marketId     String
  market       Market @relation(fields: [marketId], references: [id])
  bets         Bet[]
  // These fields are updated every time a bet is placed
  totalStaked  Int    @default(0) // in points
  bettorsCount Int    @default(0) // unique users
}

model Bet {
  id              String            @id @default(cuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  outcomeId       String
  outcome         Outcome           @relation(fields: [outcomeId], references: [id])
  amount          Int // in points
  oddsAtBet       Float? // odds calculated and saved at bet placement time
  potentialPayout Float? // amount * oddsAtBet (pre-calculated for convenience)
  status          BetStatus         @default(PENDING) // "pending", "won", "lost"
  fee             Int?
  createdAt       DateTime          @default(now())
  PlatformRevenue PlatformRevenue[]
}

model SponsorEarning {
  id        String   @id @default(cuid())
  sponsorId String // user who owns the sponsored market
  marketId  String
  betId     String
  amount    Int
  createdAt DateTime @default(now())
}

model ReferralEarning {
  id               String   @id @default(cuid())
  referrerId       String
  referredId       String
  betId            String
  fromSponsorShare Boolean  @default(false) // was this earned from a sponsor's cut?
  amountEarned     Int
  source           String?
  createdAt        DateTime @default(now())
}

// PROTOCOL REVENUE
model PlatformRevenue {
  id        String        @id @default(uuid())
  source    RevenueSource // enum: FEE, REFERRAL_SHARE, SPONSOR_SHARE
  amount    Int
  marketId  String?
  betId     String?
  userId    String? // who triggered it
  createdAt DateTime      @default(now())

  market Market? @relation(fields: [marketId], references: [id])
  bet    Bet?    @relation(fields: [betId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])
}

//CATEGIRISE PLAYERS AND MARKETS

model Player {
  id             String         @id @default(cuid())
  name           String
  teamId         String?
  profilePicture String?
  nationalityId  String?
  mainColor      String?
  stats          PlayerStat[]
  team           Team?          @relation(fields: [teamId], references: [id])
  nationality    Nationality?   @relation(fields: [nationalityId], references: [id])
  highlights     Highlight[]
  markets        PlayerMarket[]
  createdAt      DateTime       @default(now())
}

model Nationality {
  id      String   @id @default(cuid())
  name    String   @unique // e.g. "France", "Brazil"
  flag    String? // URL to flag image
  players Player[]
}

model Team {
  id             String   @id @default(cuid())
  name           String   @unique
  logo           String? // URL to team logo
  leagueId       String?
  league         League?  @relation(fields: [leagueId], references: [id])
  players        Player[]
  matchesAsTeamA Match[]  @relation("TeamA")
  matchesAsTeamB Match[]  @relation("TeamB")
}

model League {
  id    String  @id @default(cuid())
  name  String  @unique
  logo  String? // Optional: league logo
  teams Team[]
}

model Highlight {
  id        String   @id @default(cuid())
  playerId  String
  player    Player   @relation(fields: [playerId], references: [id])
  title     String
  url       String // link to the video
  createdAt DateTime @default(now())
}

// JOIN TABLE FOR PLAYER MARKETS
model PlayerMarket {
  id       String @id @default(cuid())
  marketId String
  playerId String
  market   Market @relation(fields: [marketId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
}

// Player stats 
model PlayerStat {
  id          String   @id @default(cuid())
  playerId    String
  player      Player   @relation(fields: [playerId], references: [id])
  date        DateTime // Date of the stat (e.g., match date)
  goals       Int      @default(0)
  assists     Int      @default(0)
  minutes     Int      @default(0)
  yellowCards Int      @default(0)
  redCards    Int      @default(0)
  isInjured   Boolean  @default(false)

  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  title     String? // Short headline
  body      String? // Detailed message
  type      NotificationType
  link      String? // Optional link to view more (market, player, etc.)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  Wallet    Wallet?          @relation(fields: [walletId], references: [id])
  walletId  String?
}

model Transaction {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  type          TransactionType
  amount        Float
  token         String? // e.g., "ETH", "POINT"
  description   String?
  transactionId String? // ID from the external transaction (if applicable)

  createdAt DateTime @default(now())
  Wallet    Wallet?  @relation(fields: [walletId], references: [id])
  walletId  String?
}

model UserLevel {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  level     Int      @default(1)
  xp        Int      @default(0)
  nextXp    Int      @default(100) // XP needed to reach next level
  updatedAt DateTime @updatedAt
}

model Reward {
  id        String       @id @default(cuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  type      RewardType
  source    String // e.g., "SPONSORED_MARKET", "REFERRAL", etc.
  amount    Int
  status    RewardStatus @default(PENDING)
  betId     String? // Optional reference
  createdAt DateTime     @default(now())
  claimedAt DateTime?

  // Add constraints like: claimable until X date if needed
}

model Announcements {
  id          String  @id @default(cuid())
  title       String?
  description String?
  coverUrl    String
  link        String
  themeColor  String?
  external    Boolean @default(false)
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  BET_PLACED
  BET_WON
  BET_LOST
  STAKE_REWARD
  LEVEL_UP_REWARD
  MARKET_CREATED
  REFERRAL_REWARD
  SPONSOR_REWARD
  REWARD_CLAIMED
}

enum WalletSource {
  CUSTOM
  PRIVY
  SOCIOS
  METAMASK
  WALLET_CONNECT
}

enum Chain {
  SOLANA
  CHILIZ
  ETHEREUM
}

enum NotificationType {
  MARKET_RESOLVED
  BET_RESULT
  NEW_HIGHLIGHT
  NEW_MARKET
  STAKING_REWARD
  REWARD
  TOURNAMENT_RESULT
}

enum MarketType {
  CUSTOM
  SPONSORED
  PARTENERSHIP
  FRIENDLY
  TOURNAMENT
}

enum MarketStatus {
  OPEN
  CLOSED
  PENDING
  DELAYED
  ENDED
  RESOLVED
}

enum BetStatus {
  WON
  LOST
  PENDING
}

enum RewardType {
  REFERRAL
  SPONSOR
  PROMO
  TOURNAMENT
}

enum RewardStatus {
  PENDING
  CLAIMED
  EXPIRED
}

enum RevenueSource {
  FEE
  REFERRAL_SHARE
  SPONSOR_SHARE
  WITHDRAWAL_FEE
  OTHER
  MARKET_ENTRY_FEE
  TOURNAMENT_ENTRY_FEE
}

enum MatchStatus {
  UPCOMING
  LIVE
  COMPLETED
  CANCELLED
}

enum MarketEntryType {
  FREE // No restriction
  PAID // Requires fee in platform points or tokens
  TOKEN_GATED // Requires holding a specific token
}

enum LeagueEntryType {
  FREE
  PAID
  TOKEN_GATED
}

enum LeagueType {
  OPEN
  PRIVATE
  PREMIUM
  ESPORTS
  FANTASY
}

enum ScoringType {
  TOTAL_POINTS
  WINS_ONLY
}
